#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX 100
struct Student {
    int id;
    char name[50];
    float marks;
};

struct Student students[MAX];
int count = 0;


void addStudent();
void displayStudents();
void searchStudent();
void updateStudent();
void deleteStudent();
void saveToFile();
void loadFromFile();

int main() {
    int choice;
    loadFromFile(); 

    while (1) {
        printf("\n===== STUDENT RECORD MANAGEMENT SYSTEM =====\n");
        printf("1. Add Student\n");
        printf("2. Display All Students\n");
        printf("3. Search Student\n");
        printf("4. Update Student\n");
        printf("5. Delete Student\n");
        printf("6. Save and Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        getchar(); // to clear newline

        switch (choice) {
            case 1: addStudent(); break;
            case 2: displayStudents(); break;
            case 3: searchStudent(); break;
            case 4: updateStudent(); break;
            case 5: deleteStudent(); break;
            case 6: 
                saveToFile();
                printf("‚úÖ Data saved successfully! Exiting...\n");
                exit(0);
            default:
                printf("‚ùå Invalid choice. Try again!\n");
        }
    }
    return 0;
}


void addStudent() {
    if (count >= MAX) {
        printf("‚ö†Ô∏è Database full! Cannot add more students.\n");
        return;
    }
    struct Student s;
    printf("Enter ID: ");
    scanf("%d", &s.id);
    getchar();
    printf("Enter Name: ");
    fgets(s.name, sizeof(s.name), stdin);
    s.name[strcspn(s.name, "\n")] = '\0'; // remove newline
    printf("Enter Marks: ");
    scanf("%f", &s.marks);

    students[count++] = s;
    printf("‚úÖ Student added successfully!\n");
}

void displayStudents() {
    if (count == 0) {
        printf("‚ö†Ô∏è No student records found.\n");
        return;
    }
    printf("\n--- Student List ---\n");
    for (int i = 0; i < count; i++) {
        printf("ID: %d | Name: %s | Marks: %.2f\n",
               students[i].id, students[i].name, students[i].marks);
    }
}

void searchStudent() {
    int id;
    printf("Enter ID to search: ");
    scanf("%d", &id);

    for (int i = 0; i < count; i++) {
        if (students[i].id == id) {
            printf("‚úÖ Student found: %s with %.2f marks\n", students[i].name, students[i].marks);
            return;
        }
    }
    printf("‚ùå Student not found!\n");
}


void updateStudent() {
    int id;
    printf("Enter ID to update: ");
    scanf("%d", &id);
    getchar();

    for (int i = 0; i < count; i++) {
        if (students[i].id == id) {
            printf("Enter new name: ");
            fgets(students[i].name, sizeof(students[i].name), stdin);
            students[i].name[strcspn(students[i].name, "\n")] = '\0';
            printf("Enter new marks: ");
            scanf("%f", &students[i].marks);
            printf("‚úÖ Record updated successfully!\n");
            return;
        }
    }
    printf("‚ùå Student not found!\n");
}


void deleteStudent() {
    int id;
    printf("Enter ID to delete: ");
    scanf("%d", &id);

    for (int i = 0; i < count; i++) {
        if (students[i].id == id) {
            for (int j = i; j < count - 1; j++) {
                students[j] = students[j + 1];
            }
            count--;
            printf("üóëÔ∏è Student deleted successfully!\n");
            return;
        }
    }
    printf("‚ùå Student not found!\n");
}

void saveToFile() {
    FILE *f = fopen("students.txt", "w");
    if (f == NULL) {
        printf("‚ùå Error saving file!\n");
        return;
    }
    for (int i = 0; i < count; i++) {
        fprintf(f, "%d,%s,%.2f\n", students[i].id, students[i].name, students[i].marks);
    }
    fclose(f);
}


void loadFromFile() {
    FILE *f = fopen("students.txt", "r");
    if (f == NULL) return;
    while (fscanf(f, "%d,%49[^,],%f\n", &students[count].id, students[count].name, &students[count].marks) == 3) {
        count++;
    }
    fclose(f);
}
